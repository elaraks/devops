- hosts: exampleservers
  become: True
  user: root
  vars_files:
    - ./vars/main.yml
    - ./vars/vault.yml

  pre_tasks:
    - name: update apt
      apt:
        upgrade: yes
        update_cache: yes
        cache_valid_time: 3600

  roles:
    - angstwad.docker_ubuntu

  tasks:
    - name: install apt packages
      apt:
        name: ['curl', 'nginx', 'git']
        state: present
        update_cache: yes

  ## nginx

    - name: copy nginx config file
      template: src=templates/nginx.conf.j2 dest=/etc/nginx/sites-available/default

    - name: enable config
      file: >
        dest=/etc/nginx/sites-enabled/default
        src=/etc/nginx/sites-available/default
        state=link

  ## datasheet

    - name: clean datasheet repo state
      file:
        state: absent
        path: datasheet-server

    - name: checkout develop branch of datasheet
      git:
        repo: 'https://github.com/forensic-architecture/datasheet-server'
        dest: datasheet-server
        version: develop

    - name: copy .env file to datasheet
      template: src=templates/datasheet-env.j2 dest=datasheet-server/.env

    - name: copy sheets_config.js to datasheet
      template: >
        src=templates/datasheet_sheets_config.js.j2
        dest=datasheet-server/src/sheets_config.js

    - name: remove container if exists
      docker_container:
        name: "{{ application_name }}_datasheet"
        state: absent

    - name: remove image if exists
      docker_image:
        state: absent
        name: datasheet-prod

    - name: build docker image
      docker_image:
        path: datasheet-server
        name: datasheet-prod

    - name: run datasheet-server in container
      docker_container:
        name: "{{ application_name }}_datasheet"
        image: datasheet-prod
        ports:
          - "0.0.0.0:{{ datasheet.port }}:8080"

  ## timemap

    - name: clean timemap repo state
      file:
        state: absent
        path: timemap

    - name: timemap - checkout develop branch
      git:
        repo: 'https://github.com/forensic-architecture/timemap'
        dest: timemap
        version: develop

    - name: copy config.js to timemap
      template: >
        src=templates/timemap_config.js.j2
        dest=timemap/config.js

    - name: remove container if exists
      docker_container:
        state: absent
        name: "{{ application_name }}_timemap"

    - name: remove image if exists
      docker_image:
        state: absent
        name: timemap_prod

    - name: build container from image
      docker_image:
        path: timemap
        name: timemap_prod

    - name: timemap - build in container
      docker_container:
        image: timemap_prod
        name: "{{ application_name }}_timemap"
        state: present
      # register: timemap_prod_result

    # - set_fact: timemap_prod_id={{ timemap_prod_result.ansible_facts.docker_container.Id }}

    - name: copy files from timemap build
      command: docker cp {{ application_name }}_timemap:/www/build /var/www/html/{{ application_name }}

      ## update sheets in datasheet, restart nginx, good to go
    - name: update sheets
      command: curl http://localhost:{{ datasheet.port }}/api/update

    - name: restart nginx
      service: name=nginx state=restarted enabled=yes
